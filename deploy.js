// synchronous [solidity]
// asynchronous [javascript]

// cooking
// Synchronous
// 1. Put popcorn in microwave -> Promise
// 2. Wait for popcorn to finish
// 3. Pour drinks for everyone

// Asynchronous
// 1. Put popcorn in the mircrowave
// 2. Pour drinks for everyone
// 3. Wait for popcorn to finish

// Promise
// Pending
// Fulfilled
// Rejected
const ethers = require("ethers")
const fs = require("fs-extra")
require("dotenv").config()

async function main() {
    //compile them in your code
    //compile them seperately
    //http://172.24.192.1:7545
    // First, compile this!
    // And make sure to have your ganache network up!
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL) //"http://172.24.192.1:7545"//for real testnet https://eth-goerli.g.alchemy.com/v2/7LP0D8QZiAo2JnyLF5hjMo7LNhzVAq-x
    //console.log(process.env);// one time for configuration
    //incase of encryptkey.js!!!const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider); //incase of .env file"0ca028e6f4370f91244b2fd2dbdad05a539c4240aec72a4458dc6096c40a5a5e"
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider)
    //   const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
    //   let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    //     encryptedJson,
    //     process.env.PRIVATE_KEY_PASSWORD
    //   );
    //   wallet = wallet.connect(provider);
    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8")
    const binary = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.bin",
        "utf8"
    )
    const contractFactory = new ethers.ContractFactory(abi, binary, wallet)
    console.log("Deploying, please wait...")
    const contract = await contractFactory.deploy() //stop here wait for contract to deploy//contractFactory.deploy({gasPrice: 100000000000})
    //console.log(contract);
    await contract.deployTransaction.wait(1)
    console.log(`Contarct address: ${contract.address}`)

    // console.log("Here is the transaction:")
    // console.log(contract.deployTransaction)
    // console.log("Here is the receipt:")
    // console.log(deploymentReceipt)
    // const nonce = await wallet.getTransactionCount()
    //   console.log("Let deploy with only tranaction data");
    //   const nonce = await wallet.getTransactionCount();
    //   const tx = {
    //     nonce: nonce,
    //     gasPrice: 100000000000,
    //     gasLimit: 1000000,
    //     to: null,
    //     value: 0,
    //     data: "0x608060405234801561001057600080fd5b50610976806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec1146100675780634f2be91f146100855780636057361d146100a35780636f760f41146100bf5780638fc65158146100db5780639e7a13ad1461010b575b600080fd5b61006f61013c565b60405161007c91906102ed565b60405180910390f35b61008d610145565b60405161009a91906102ed565b60405180910390f35b6100bd60048036038101906100b89190610348565b61014e565b005b6100d960048036038101906100d491906104bb565b610161565b005b6100f560048036038101906100f09190610517565b6101ea565b60405161010291906102ed565b60405180910390f35b61012560048036038101906101209190610348565b610218565b6040516101339291906105df565b60405180910390f35b60008054905090565b60006002905090565b8060008190555061015d61013c565b5050565b600260405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190816101c0919061081b565b505050806001836040516101d49190610929565b9081526020016040518091039020819055505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6002818154811061022857600080fd5b90600052602060002090600202016000915090508060000154908060010180546102519061063e565b80601f016020809104026020016040519081016040528092919081815260200182805461027d9061063e565b80156102ca5780601f1061029f576101008083540402835291602001916102ca565b820191906000526020600020905b8154815290600101906020018083116102ad57829003601f168201915b5050505050905082565b6000819050919050565b6102e7816102d4565b82525050565b600060208201905061030260008301846102de565b92915050565b6000604051905090565b600080fd5b600080fd5b610325816102d4565b811461033057600080fd5b50565b6000813590506103428161031c565b92915050565b60006020828403121561035e5761035d610312565b5b600061036c84828501610333565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103c88261037f565b810181811067ffffffffffffffff821117156103e7576103e6610390565b5b80604052505050565b60006103fa610308565b905061040682826103bf565b919050565b600067ffffffffffffffff82111561042657610425610390565b5b61042f8261037f565b9050602081019050919050565b82818337600083830152505050565b600061045e6104598461040b565b6103f0565b90508281526020810184848401111561047a5761047961037a565b5b61048584828561043c565b509392505050565b600082601f8301126104a2576104a1610375565b5b81356104b284826020860161044b565b91505092915050565b600080604083850312156104d2576104d1610312565b5b600083013567ffffffffffffffff8111156104f0576104ef610317565b5b6104fc8582860161048d565b925050602061050d85828601610333565b9150509250929050565b60006020828403121561052d5761052c610312565b5b600082013567ffffffffffffffff81111561054b5761054a610317565b5b6105578482850161048d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561059a57808201518184015260208101905061057f565b60008484015250505050565b60006105b182610560565b6105bb818561056b565b93506105cb81856020860161057c565b6105d48161037f565b840191505092915050565b60006040820190506105f460008301856102de565b818103602083015261060681846105a6565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061065657607f821691505b6020821081036106695761066861060f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106d17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610694565b6106db8683610694565b95508019841693508086168417925050509392505050565b6000819050919050565b600061071861071361070e846102d4565b6106f3565b6102d4565b9050919050565b6000819050919050565b610732836106fd565b61074661073e8261071f565b8484546106a1565b825550505050565b600090565b61075b61074e565b610766818484610729565b505050565b5b8181101561078a5761077f600082610753565b60018101905061076c565b5050565b601f8211156107cf576107a08161066f565b6107a984610684565b810160208510156107b8578190505b6107cc6107c485610684565b83018261076b565b50505b505050565b600082821c905092915050565b60006107f2600019846008026107d4565b1980831691505092915050565b600061080b83836107e1565b9150826002028217905092915050565b61082482610560565b67ffffffffffffffff81111561083d5761083c610390565b5b610847825461063e565b61085282828561078e565b600060209050601f8311600181146108855760008415610873578287015190505b61087d85826107ff565b8655506108e5565b601f1984166108938661066f565b60005b828110156108bb57848901518255600182019150602085019450602081019050610896565b868310156108d857848901516108d4601f8916826107e1565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b600061090382610560565b61090d81856108ed565b935061091d81856020860161057c565b80840191505092915050565b600061093582846108f8565b91508190509291505056fea2646970667358221220ac7b4d8325520d4c4dae433ebf7c983d08c9983e68ed32a2ad3808beb1e2ea6e64736f6c63430008110033",
    //     chainId: 1337,

    // Additionally, there is a v,r,and s variable that ethers handles for us.
    // This is the signature of the transaction.
    // There is a lot of math going on with those values, but that's how it's gaurenteed that the transaction is signed!
    // https://ethereum.stackexchange.com/questions/15766/what-does-v-r-s-in-eth-gettransactionbyhash-mean
    //   };

    // There is also a v, r, and s component of the transaction that Ethers will handle for us.
    // It's these three components that make up the cryptographic signature.
    // We won't go into this, because it's a lot of math.

    // console.log("Let's deploy another! Please wait...")
    //const resp = await wallet.signTransaction(tx);
    //   const sentTxResponse = await wallet.sendTransaction(tx);
    //   console.log(sentTxResponse);

    //Get Number
    const currentFavoriteNumber = await contract.retrieve()
    console.log(`Current Favorite Number: ${currentFavoriteNumber}`)
    console.log("Updating favorite number...")
    const transactionResponse = await contract.store(7)
    const transactionReceipt = await transactionResponse.wait(1)
    updateFavoriteNumber = await contract.retrieve()
    console.log(`New Favorite Number: ${updateFavoriteNumber}`)
}
main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error)
        process.exit(1)
    })
